{{- $fullname := (printf "%s-%s" .Values.name .Values.environment) }}
{{- $githubFullname := printf "%s_%s" .Values.name .Values.environment | replace "-" "_" | lower }}
{{- $namespace := (printf "%s-%s" .Values.club .Values.environment) }}
{{- $githubAppID := 1172114 }}
{{- $githubPrivateKey := "<path:avp/data/github/ci-infrastructure#app_private_key>" }}
{{- $githubToken := "<path:avp/data/github/ci-infrastructure#token>" }}
{{- $ecrRegistry := "786584124104.dkr.ecr.ap-northeast-2.amazonaws.com" }}
{{- $argoEventsHost := "argo-events.xquare.app" }}
{{- $gitopsRepo := "team-xquare/xquare-gitops-repo-v3" }}
{{- $webhookPort := 12000 }}
{{- $useLatestTag := empty .Values.imageTag }}
---
apiVersion: argoproj.io/v1alpha1
kind: EventBus
metadata:
  name: ci-eventbus
  namespace: {{ $namespace }}
spec:
  nats:
    native:
      replicas: 3
      antiAffinity: false
      auth: none
      tolerations:
        - key: xquare/ci-server
          operator: Equal
          value: 'true'
          effect: NoSchedule
      containerTemplate:
        resources:
          requests:
            cpu: 15m
            memory: 25Mi
          limits:
            cpu: 40m
            memory: 50Mi
---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: {{ $fullname }}-github-webhook
  namespace: {{ $namespace }}
  annotations:
    sidecar.istio.io/inject: "false"
spec:
  eventBusName: ci-eventbus
  github:
    {{ $githubFullname }}:
      repositories:
        - owner: {{ .Values.organization }}
          names:
            - {{ .Values.repository }}
      githubApp:
        privateKey:
          name: {{ $fullname }}-github-app-pem
          key: privateKey.pem
        appID: {{ $githubAppID }}
        installationID: {{ .Values.githubInstallationID }}
      webhook:
        endpoint: /webhooks/{{ $fullname }}
        port: "{{ $webhookPort }}"
        method: POST
        url: "https://{{ $argoEventsHost }}"
      events:
        - push
      insecure: true
      active: true
      contentType: json
  service:
    ports:
      - name: {{ $fullname }}
        port: {{ $webhookPort }}
        targetPort: {{ $webhookPort }}
  template:
    container:
      resources:
        requests:
          cpu: 25m
          memory: 40Mi
        limits:
          cpu: 60m
          memory: 75Mi
    tolerations:
      - key: xquare/ci-server
        operator: Equal
        value: 'true'
        effect: NoSchedule
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: {{ $fullname }}-sensor
  namespace: {{ $namespace }}
  annotations:
    sidecar.istio.io/inject: "false"
spec:
  dependencies:
    - name: {{ $fullname }}-github-push
      eventName: {{ $githubFullname }}
      eventSourceName: {{ $fullname }}-github-webhook
      filters:
        data:
          - path: body.ref
            type: string
            value:
              - "refs/heads/{{ .Values.branch }}"
          {{- if $useLatestTag }}
          - path: body.X-GitHub-Event
            type: string
            value:
              - "ping"
          {{- end }}
        dataLogicalOperator: "or"
  eventBusName: ci-eventbus
  template:
    container:
      resources:
        requests:
          cpu: 25m
          memory: 40Mi
        limits:
          cpu: 60m
          memory: 75Mi
    serviceAccountName: kaniko-sa
    tolerations:
      - key: xquare/ci-server
        operator: Equal
        value: 'true'
        effect: NoSchedule
  triggers:
    - retryStrategy:
        steps: 3
      template:
        k8s:
          operation: create
          {{- if not $useLatestTag }}
          parameters:
            - src:
                dependencyName: {{ $fullname }}-github-push
                dataKey: body.after
              dest: spec.arguments.parameters.0.value
          {{- end }}
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: {{ $fullname }}-ci-
                namespace: {{ $namespace }}
                annotations:
                  sidecar.istio.io/inject: "false"
              spec:
                {{- if not $useLatestTag }}
                arguments:
                  parameters:
                    - name: git-sha
                {{- end }}
                entrypoint: ci-pipeline
                podGC:
                  strategy: OnPodCompletion
                serviceAccountName: kaniko-sa
                templates:
                  - name: ci-pipeline
                    dag:
                      tasks:
                        - name: build
                          {{- if not $useLatestTag }}
                          arguments:
                            parameters:
                              - name: sha
                                value: "{{`{{workflow.parameters.git-sha}}`}}"
                          {{- end }}
                          template: docker-build
                        - name: update-gitops
                          arguments:
                            parameters:
                              - name: image-tag
                                {{- if $useLatestTag }}
                                value: "latest"
                                {{- else }}
                                value: "{{`{{workflow.parameters.git-sha}}`}}"
                                {{- end }}
                          dependencies: [build]
                          template: update-gitops

                  - name: docker-build
                    metadata:
                      annotations:
                        sidecar.istio.io/inject: "false"
                    tolerations:
                      - key: xquare/ci-server
                        operator: Equal
                        value: 'true'
                        effect: NoSchedule
                    {{- if not $useLatestTag }}
                    inputs:
                      parameters:
                        - name: sha
                    {{- end }}
                    container:
                      image: gcr.io/kaniko-project/executor:latest
                      args:
                        - "--context=/workspace/repo"
                        - "--dockerfile=/workspace/repo/Dockerfile"
                        {{- if not $useLatestTag }}
                        - "--destination={{ $ecrRegistry }}/{{ $namespace }}/{{ .Values.name }}:{{`{{inputs.parameters.sha}}`}}"
                        {{- end }}
                        - "--destination={{ $ecrRegistry }}/{{ $namespace }}/{{ .Values.name }}:latest"
                        - "--cache=true"
                        - "--cache-repo={{ $ecrRegistry }}/cache"
                      env:
                        - name: AWS_SDK_LOAD_CONFIG
                          value: "true"
                      resources:
                        requests:
                          cpu: 1
                          memory: 7Gi
                        limits:
                          cpu: 2
                          memory: 8Gi
                      volumeMounts:
                        - name: workspace
                          mountPath: /workspace
                    initContainers:
                      - name: checkout-and-prepare
                        image: python:3.9-slim
                        command: ["/bin/sh", "-c"]
                        args:
                          - |
                            apt-get update && apt-get install -y --no-install-recommends git curl && pip install --no-cache-dir requests PyJWT cryptography jinja2-cli && apt-get clean && rm -rf /var/lib/apt/lists/*
                            APP_ID={{ $githubAppID }}
                            INSTALL_ID={{ .Values.githubInstallationID }}
                            NOW=$(date +%s)
                            EXPIRY=$((NOW + 600))
                            echo "$GITHUB_PRIVATE_KEY" > /tmp/key.pem
                            TOKEN=$(python -c "import jwt,requests; key=open('/tmp/key.pem','rb').read(); payload={'iat':$NOW-60,'exp':$EXPIRY,'iss':$APP_ID}; jwt_token=jwt.encode(payload,key,'RS256'); resp=requests.post('https://api.github.com/app/installations/$INSTALL_ID/access_tokens',headers={'Authorization':f'Bearer {jwt_token}','Accept':'application/vnd.github+json'}); print(resp.json()['token'] if resp.status_code==201 else exit(1))")
                            {{- if not $useLatestTag }}
                            SHA="{{`{{inputs.parameters.sha}}`}}"
                            {{- end }}
                            git clone -b {{ .Values.branch }} --single-branch --depth 1 https://${TOKEN}@github.com/{{ .Values.organization }}/{{ .Values.repository }}.git /workspace/repo
                            cd /workspace/repo
                            {{- if not $useLatestTag }}
                            git checkout $SHA || { echo "Failed to checkout SHA: $SHA"; exit 1; }
                            {{- end }}
                            echo '{{ .Values.buildConfig }}' | python -c "import json,sys,requests; config=json.load(sys.stdin); builder=config.get('builder','default'); template=requests.get(f'https://raw.githubusercontent.com/team-xquare/xquare-gitops-repo-v3/main/templates/dockerfile/templates/{builder}.template').text if True else 'FROM alpine:latest'; open('/workspace/repo/Dockerfile','w').write(template)"
                        env:
                          - name: GITHUB_PRIVATE_KEY
                            valueFrom:
                              secretKeyRef:
                                name: {{ $fullname }}-github-app-pem
                                key: privateKey.pem
                        resources:
                          requests:
                            cpu: 40m
                            memory: 64Mi
                          limits:
                            cpu: 100m
                            memory: 128Mi
                        volumeMounts:
                          - name: workspace
                            mountPath: /workspace

                  - name: update-gitops
                    metadata:
                      annotations:
                        sidecar.istio.io/inject: "false"
                    tolerations:
                      - key: xquare/ci-server
                        operator: Equal
                        value: 'true'
                        effect: NoSchedule
                    inputs:
                      parameters:
                        - name: image-tag
                    container:
                      image: curlimages/curl:latest
                      command: ["/bin/sh", "-c"]
                      args:
                        - |
                          curl -X POST \
                            -H "Authorization: token ${GITHUB_TOKEN}" \
                            -H "Accept: application/vnd.github.v3+json" \
                            https://api.github.com/repos/{{ $gitopsRepo }}/dispatches \
                            -d '{
                              "event_type": "config-api",
                              "client_payload": {
                                "path": "{{ .Values.club }}/{{ .Values.name }}/{{ .Values.environment }}",
                                "action": "apply",
                                "spec": {
                                  "imageTag": "'"{{`{{inputs.parameters.image-tag}}`}}"'"
                                }
                              }
                            }'
                      env:
                        - name: GITHUB_TOKEN
                          valueFrom:
                            secretKeyRef:
                              key: token
                              name: {{ $fullname }}-github-token
                      resources:
                        requests:
                          cpu: 15m
                          memory: 25Mi
                        limits:
                          cpu: 40m
                          memory: 50Mi
                volumes:
                  - name: workspace
                    emptyDir: {}
        name: {{ $fullname }}-workflow-trigger
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $fullname }}-github-webhook-vs
  namespace: {{ $namespace }}
  annotations:
    external-dns.alpha.kubernetes.io/hostname: {{ $argoEventsHost }}
spec:
  hosts:
    - "{{ $argoEventsHost }}"
  gateways:
    - istio-system/xquare-ingressgateway
  http:
    - match:
        - uri:
            prefix: /webhooks/{{ $fullname }}
      route:
        - destination:
            host: {{ $fullname }}-github-webhook-eventsource-svc
            port:
              number: {{ $webhookPort }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kaniko-sa
  namespace: {{ $namespace }}
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::786584124104:role/kaniko-ecr-push-role"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ $fullname }}-workflow-role
  namespace: {{ $namespace }}
rules:
  - apiGroups: [""]
    resources: ["pods", "pods/log"]
    verbs: ["get", "watch", "patch", "list", "delete"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["configmaps", "persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "create", "update", "delete", "patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch", "list"]
  - apiGroups: ["argoproj.io"]
    resources: ["workflows", "workflows/finalizers", "workflowtaskresults"]
    verbs: ["get", "list", "watch", "update", "patch", "create", "delete"]
  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["create", "get", "delete"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "create", "update", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ $fullname }}-workflow-rolebinding
  namespace: {{ $namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ $fullname }}-workflow-role
subjects:
  - kind: ServiceAccount
    name: kaniko-sa
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $fullname }}-github-app-pem
  namespace: {{ $namespace }}
type: Opaque
data:
  privateKey.pem: "{{ $githubPrivateKey | b64enc }}"
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $fullname }}-github-token
  namespace: {{ $namespace }}
type: Opaque
data:
  token: "{{ $githubToken | b64enc }}"