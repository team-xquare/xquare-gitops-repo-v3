{{- $fullname := (printf "%s-%s" .Values.name .Values.environment) }}
{{- $githubFullname := printf "%s_%s" .Values.name .Values.environment | lower }}
{{- $namespace := (printf "%s-%s" .Values.club .Values.environment) }}
{{- $githubAppID := 1172114 }}
{{- $githubPrivateKey := "<path:avp/data/github/ci-infrastructure#app_private_key>" }}
{{- $githubToken := "<path:avp/data/github/ci-infrastructure#token>" }}
{{- $ecrRegistry := "786584124104.dkr.ecr.ap-northeast-2.amazonaws.com" }}
{{- $argoEventsHost := "argo-events.xquare.app" }}
{{- $gitopsRepo := "team-xquare/xquare-gitops-repo-v3" }}
{{- $webhookPort := 12000 }}
---
apiVersion: argoproj.io/v1alpha1
kind: EventBus
metadata:
  name: ci-eventbus
  namespace: {{ $namespace }}
spec:
  nats:
    native:
      replicas: 3
      auth: token
      tolerations:
        - key: xquare/ci-server
          operator: Equal
          value: 'true'
          effect: NoSchedule
---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: {{ $fullname }}-github-webhook
  namespace: {{ $namespace }}
spec:
  service:
    ports:
      - name: {{ $fullname }}
        port: {{ $webhookPort }}
        targetPort: {{ $webhookPort }}
  eventBusName: ci-eventbus
  template:
    tolerations:
      - key: xquare/ci-server
        operator: Equal
        value: 'true'
        effect: NoSchedule
  github:
    {{ $githubFullname }}:
      repositories:
        - owner: {{ .Values.organization }}
          names:
            - {{ .Values.repository }}
      githubApp:
        privateKey:
          name: {{ $fullname }}-github-app-pem
          key: privateKey.pem
        appID: {{ $githubAppID }}
        installationID: {{ .Values.githubInstallationID }}
      webhook:
        endpoint: /webhooks/{{ $fullname }}
        port: "{{ $webhookPort }}"
        method: POST
        url: "https://{{ $argoEventsHost }}/webhooks/{{ $fullname }}"
      events:
        - push
      insecure: true
      active: true
      contentType: json
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: {{ $fullname }}-sensor
  namespace: {{ $namespace }}
spec:
  template:
    tolerations:
      - key: xquare/ci-server
        operator: Equal
        value: 'true'
        effect: NoSchedule
    serviceAccountName: {{ $fullname }}-workflow-sa
  eventBusName: ci-eventbus
  dependencies:
    - name: {{ $fullname }}-github-push
      eventSourceName: {{ $fullname }}-github-webhook
      eventName: {{ $fullname }}
      filters:
        data:
          - path: body.ref
            type: string
            value: 
              - "refs/heads/{{ .Values.branch }}"
  triggers:
    - template:
        name: {{ $fullname }}-workflow-trigger
        argoWorkflow:
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: {{ $fullname }}-ci-
                namespace: {{ $namespace }}
              spec:
                serviceAccountName: {{ $fullname }}-workflow-sa
                entrypoint: ci-pipeline
                arguments:
                  parameters:
                    - name: git-sha
                      value: "{{`{{github.event.after}}`}}"
                volumes:
                  - name: workspace
                    emptyDir: {}
                templates:
                  - name: ci-pipeline
                    dag:
                      tasks:
                        - name: build
                          template: docker-build
                          arguments:
                            parameters:
                              - name: sha
                                value: "{{`{{workflow.parameters.git-sha}}`}}"
                        - name: update-gitops
                          dependencies: [build]
                          template: update-gitops
                          arguments:
                            parameters:
                              - name: image-name
                                value: "{{`{{tasks.build.outputs.parameters.image_name}}`}}"

                  - name: docker-build
                    inputs:
                      parameters:
                        - name: sha
                    outputs:
                      parameters:
                        - name: image_name
                          valueFrom:
                            path: /workspace/image_name.txt
                    initContainers:
                      - name: checkout-and-prepare
                        image: python:3.9-alpine
                        command: ["/bin/sh", "-c"]
                        args:
                          - |
                            apk add --no-cache git jq curl
                            pip install jinja2-cli

                            SHA="{{`{{inputs.parameters.sha}}`}}"
                            IMG="{{ $ecrRegistry }}/{{ $namespace }}/{{ .Values.name }}:${SHA}"
                            echo "$IMG" > /workspace/image_name.txt

                            git clone -b {{ .Values.branch }} --single-branch https://github.com/{{ .Values.organization }}/{{ .Values.repository }}.git /workspace/repo
                            cd /workspace/repo
                            git checkout $SHA

                            echo '{{ .Values.buildConfig }}' > /tmp/config.json
                            BUILDER=$(jq -r '.builder // "default"' /tmp/config.json)

                            curl -s "https://raw.githubusercontent.com/team-xquare/gitops-repo-v3/main/templates/dockerfile/templates/${BUILDER}.template" -o /tmp/template.j2 || echo "FROM alpine:latest" > /tmp/template.j2
                            jinja2 /tmp/template.j2 /tmp/config.json > /workspace/repo/Dockerfile
                        volumeMounts:
                          - name: workspace
                            mountPath: /workspace
                    container:
                      image: gcr.io/kaniko-project/executor:latest
                      args:
                        - "--context=/workspace/repo"
                        - "--dockerfile=/workspace/repo/Dockerfile"
                        - "--destination={{`{{outputs.parameters.image_name}}`}}"
                        - "--destination={{ $ecrRegistry }}/{{ $namespace }}/{{ .Values.name }}:latest"
                        - "--cache=true"
                        - "--cache-repo={{ $ecrRegistry }}/cache"
                      env:
                        - name: AWS_SDK_LOAD_CONFIG
                          value: "true"
                      volumeMounts:
                        - name: workspace
                          mountPath: /workspace

                  - name: update-gitops
                    inputs:
                      parameters:
                        - name: image-name
                    container:
                      image: bitnami/git:latest
                      command: [sh, -c]
                      args:
                        - |
                          curl -X POST \
                            -H "Authorization: token ${GITHUB_TOKEN}" \
                            -H "Accept: application/vnd.github.v3+json" \
                            https://api.github.com/repos/{{ $gitopsRepo }}/dispatches \
                            -d '{
                              "event_type": "config-api",
                              "client_payload": {
                                "path": "{{ .Values.club }}/{{ .Values.name }}/{{ .Values.environment }}",
                                "action": "apply",
                                "spec": {
                                  "image_name": "'"{{`{{inputs.parameters.image-name}}`}}"'"
                                }
                              }
                            }'
                      env:
                        - name: GITHUB_TOKEN
                          valueFrom:
                            secretKeyRef:
                              name: {{ $fullname }}-github-token
                              key: token
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $fullname }}-github-webhook-vs
  namespace: {{ $namespace }}
  annotations:
    external-dns.alpha.kubernetes.io/hostname: {{ $argoEventsHost }}
spec:
  hosts:
    - "{{ $argoEventsHost }}"
  gateways:
    - istio-system/xquare-ingressgateway
  http:
    - match:
        - uri:
            prefix: /webhooks/{{ $fullname }}
      route:
        - destination:
            host: {{ $fullname }}-github-webhook-eventsource-svc
            port:
              number: {{ $webhookPort }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $fullname }}-workflow-sa
  namespace: {{ $namespace }}
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::786584124104:role/kaniko-ecr-push-role"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ $fullname }}-workflow-role
  namespace: {{ $namespace }}
rules:
  - apiGroups: [""]
    resources: ["pods", "pods/log"]
    verbs: ["get", "watch", "patch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
  - apiGroups: ["argoproj.io"]
    resources: ["workflows", "workflows/finalizers"]
    verbs: ["get", "list", "watch", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ $fullname }}-workflow-rolebinding
  namespace: {{ $namespace }}
subjects:
  - kind: ServiceAccount
    name: {{ $fullname }}-workflow-sa
roleRef:
  kind: Role
  name: {{ $fullname }}-workflow-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $fullname }}-github-app-pem
  namespace: {{ $namespace }}
type: Opaque
data:
  privateKey.pem: "{{ $githubPrivateKey | b64enc }}"
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $fullname }}-github-token
  namespace: {{ $namespace }}
type: Opaque
data:
  token: "{{ $githubToken | b64enc }}"
